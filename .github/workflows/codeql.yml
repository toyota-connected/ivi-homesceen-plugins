# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Advanced"

on:
  push:
    branches: [ "v2.0" ]
  pull_request:
    branches: [ "v2.0" ]
  schedule:
    - cron: '39 12 * * 3'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: c-cpp
          build-mode: autobuild
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: plugins
        submodules: 'true'
        persist-credentials: false
      
    - name: Fetch ivi-homescreen
      working-directory: ${{github.workspace}}
      run: |
        git clone https://github.com/toyota-connected/ivi-homescreen.git
        cd ivi-homescreen
        git submodule update --init --recursive

    - name: Install runtime packages
      run: |
        sudo apt-get -o DPkg::Lock::Timeout=1200 -y update
        sudo apt-get -o DPkg::Lock::Timeout=1200 -y install \
          \
          ninja-build \
          \
          libwayland-dev wayland-protocols libxkbcommon-dev \
          \
          mesa-common-dev libegl1-mesa-dev libgles2-mesa-dev \
          mesa-utils \
          \
          libcurl4-openssl-dev \
          libevent-dev \
          libglfw3-dev \
          libicu-dev \
          libsecret-1-dev \
          libsdl2-dev \
          libuv1-dev \
          \
          libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev \
          libgstreamer-plugins-bad1.0-dev \
          libavformat-dev libavutil-dev \
          \
          libunwind-dev \
          \
          libjpeg-turbo8-dev libturbojpeg0-dev libjpeg-dev \
          libpng-dev libwebp-dev \
          \
          libflatpak-dev libxml2-dev zlib1g-dev

        sudo apt-get -o DPkg::Lock::Timeout=1200 -y install \
          clang \
          llvm \
          lldb \
          lld \
          libc++-dev \
          libc++abi-dev \
          libc++1 \
          libc++abi1

        pip3 install absl-py jinja2 ply meson --user

        cmake --version
        gcc --version

    - name: Cache libcamera
      id: cache-libcamera
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-libcamera
        path: |
          ${{github.workspace}}/libcamera/buildDir/staging/release/*

    - name: Build libcamera
      if: steps.cache-libcamera.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}
      run: |
        git clone https://git.libcamera.org/libcamera/libcamera.git
        cd libcamera && git checkout v0.3.1
        LIBCAMERA_STAGING=$PWD/buildDir/staging/release
        CC=/usr/bin/clang CXX=/usr/bin/clang++ \
        meson setup buildDir -Dqcam="disabled" -Dlc-compliance="disabled" -Dcam="disabled" -Dgstreamer="disabled" --prefix $LIBCAMERA_STAGING
        ninja -C buildDir install
        ls -laR $LIBCAMERA_STAGING

    - name: Cache filament
      id: cache-filament
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-filament
        path: |
          ${{github.workspace}}/filament/cmake-build-release/staging/release/*

    - name: Build Filament
      if: steps.cache-filament.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}
      run: |
        git clone https://github.com/google/filament.git
        cd filament
        git checkout v1.52.3
        PATCHES=$(find ${{github.workspace}} -iname patches)
        git apply $PATCHES/filament/0001-error-ignoring-return-value-of-function-declared-wit.patch
        git apply $PATCHES/filament/0002-disable-backend-tests.patch
        git apply $PATCHES/filament/0003-install-required-files.patch
        git apply $PATCHES/filament/0004-move-include-contents-to-include-filament.patch
        git apply $PATCHES/filament/0005-move-libraries-so-they-install.patch
        git apply $PATCHES/filament/0006-return-shader-type-mobile-for-linux-vulkan.patch

        FILAMENT_BUILD_DIR=$PWD/cmake-build-release
        FILAMENT_STAGING_DIR=${FILAMENT_BUILD_DIR}/staging/release
        mkdir -p $FILAMENT_BUILD_DIR
        cd $FILAMENT_BUILD_DIR
        CC=/usr/bin/clang CXX=/usr/bin/clang++ \
        cmake .. -GNinja \
          -DFILAMENT_SUPPORTS_VULKAN=ON \
          -DFILAMENT_ENABLE_LTO=ON \
          -DFILAMENT_SUPPORTS_OPENGL=OFF \
          -DFILAMENT_USE_EXTERNAL_GLES3=OFF \
          -DFILAMENT_SUPPORTS_WAYLAND=ON \
          -DFILAMENT_SUPPORTS_X11=OFF \
          -DFILAMENT_SUPPORTS_XCB=OFF \
          -DFILAMENT_SUPPORTS_EGL_ON_LINUX=OFF \
          -DFILAMENT_SKIP_SDL2=ON \
          -DFILAMENT_SKIP_SAMPLES=ON \
          -DFILAMENT_USE_SWIFTSHADER=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_STAGING_PREFIX=${FILAMENT_STAGING_DIR} \
          -DCMAKE_BUILD_TYPE=Release
        ninja -C . install

    - name: Configure
      run: |
        mkdir -p ${{github.workspace}}/build/release
        PKG_CONFIG_PATH=${{github.workspace}}/libcamera/buildDir/staging/release/lib/x86_64-linux-gnu/pkgconfig \
        CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -GNinja \
          ${{github.workspace}}/ivi-homescreen \
          -B ${{github.workspace}}/build/release \
          -D CMAKE_BUILD_TYPE=Release \
          -D CMAKE_STAGING_PREFIX=${{github.workspace}}/build/staging/usr/local \
          -D BUILD_NUMBER=${GITHUB_RUN_ID} \
          -D CMAKE_VERBOSE_MAKEFILE=ON \
          -D ENABLE_DLT=OFF \
          -D BUILD_CRASH_HANDLER=OFF \
          -D ENABLE_LTO=ON \
          \
          -D PLUGINS_DIR=${{github.workspace}}/plugins/plugins \
          \
          -D DEBUG_PLATFORM_MESSAGES=OFF \
          \
          -D BUILD_PLUGIN_AUDIOPLAYERS_LINUX=OFF \
          -D BUILD_PLUGIN_CAMERA=ON \
          -D BUILD_PLUGIN_CLOUD_FIRESTORE=OFF \
          -D BUILD_PLUGIN_DESKTOP_WINDOW_LINUX=ON \
          -D BUILD_PLUGIN_FILAMENT_VIEW=ON \
          -D FILAMENT_INCLUDE_DIR=${{github.workspace}}/filament/cmake-build-release/staging/release/include \
          -D FILAMENT_LINK_LIBRARIES_DIR=${{github.workspace}}/filament/cmake-build-release/staging/release/lib/x86_64 \
          -D BUILD_PLUGIN_FILE_SELECTOR=ON \
          -D BUILD_PLUGIN_FIREBASE_AUTH=OFF \
          -D BUILD_PLUGIN_FIREBASE_STORAGE=OFF \
          -D BUILD_PLUGIN_GO_ROUTER=ON \
          -D BUILD_PLUGIN_GOOGLE_SIGN_IN=ON \
          -D BUILD_PLUGIN_INTEGRATION_TEST=ON \
          -D BUILD_PLUGIN_LAYER_PLAYGROUND_VIEW=ON \
          -D BUILD_PLUGIN_NAV_RENDER_VIEW=ON \
          -D BUILD_PLUGIN_PDF=OFF \
          -D BUILD_PLUGIN_SECURE_STORAGE=ON \
          -D BUILD_PLUGIN_URL_LAUNCHER=ON \
          -D BUILD_PLUGIN_VIDEO_PLAYER_LINUX=OFF \
          -D BUILD_PLUGIN_WEBVIEW_FLUTTER_VIEW=OFF \
          -D BUILD_PLUGIN_FLATPAK=ON \
          \
          -D ENABLE_CLANG_STATIC_LINK=OFF \
          -D BUILD_WATCHDOG=OFF \
          -D BUILD_SYSTEMD_WATCHDOG=OFF

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        ninja -C ${{github.workspace}}/build/release
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
